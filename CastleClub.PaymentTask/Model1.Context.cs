//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CastleClub.Tasks.PaymentTask
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CastleClubEntities : DbContext
    {
        public CastleClubEntities()
            : base("name=CastleClubEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public virtual DbSet<aspnet_Paths> aspnet_Paths { get; set; }
        public virtual DbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers { get; set; }
        public virtual DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser { get; set; }
        public virtual DbSet<aspnet_Profile> aspnet_Profile { get; set; }
        public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
        public virtual DbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events { get; set; }
        public virtual DbSet<CancellationsView> CancellationsViews { get; set; }
        public virtual DbSet<CreditCard> CreditCards { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomersView> CustomersViews { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoicesView> InvoicesViews { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<NotificationProcess> NotificationProcesses { get; set; }
        public virtual DbSet<Referrer> Referrers { get; set; }
        public virtual DbSet<RefundsView> RefundsViews { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Visit> Visits { get; set; }
    
        public virtual ObjectResult<ReportCancelationsPerDays_Result> ReportCancelationsPerDays(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> siteID)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportCancelationsPerDays_Result>("ReportCancelationsPerDays", date1Parameter, date2Parameter, siteIDParameter);
        }
    
        public virtual ObjectResult<ReportsignupsPerDays_Result> ReportsignupsPerDays(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> siteID)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsignupsPerDays_Result>("ReportsignupsPerDays", date1Parameter, date2Parameter, siteIDParameter);
        }
    
        public virtual ObjectResult<ReportVisitsPerDays_Result> ReportVisitsPerDays(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> siteID)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportVisitsPerDays_Result>("ReportVisitsPerDays", date1Parameter, date2Parameter, siteIDParameter);
        }
    }
}
